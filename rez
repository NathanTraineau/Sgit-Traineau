package IO

import scopt.OParser

import Branches.Branch_Manager
import Commit_History.Log_Manager
import Create.Repository
import Local_Changes.{Add_Manager, Commit_Manager, Diff_Manager, Status_Manager}

object Command_Parser {
fds
cccccccccc
sdq
fd
s
d
ds
D
S
d

sqdf
zzzzzzzzzzz
yyyyyyyyyyy
aaaaaaaaaa
bbbbbbbbbbb
fdq
fdsq
ffdsqfsdq
df
d
qf
fd
sqf
q
f
dsf
ds
f
dsqf
dsq
f
sdf
ds
fq
f
sdq
fs
dqg
hq
qfhd
dfhs
h
dsh
d
h
es
bfs
f
qsd
f
h'

thz
h
re

zg
a
e
ag
r
ahet
ah
hr

hrer
r
r
r
r
r

r
h
h
ht
rehtetrhtrehtrehr
tr
h
trh
trh
package Local_Changes

import java.io.File

import Create.Repository
import IO.{File_Tools, Output}

case class Change( change_type : String , line : Int, changed_string : String )
//Change_type is either deleted (-) or added (+)
case class Relationship(new_blob_file : Option[File], former_Blob_File : Option[File],
                        change_type : String, index_line : String, list_changes : List[Change] = List[Change]()){
  val new_Blob_file_name: String = new_blob_file match {
    case Some(file) => file.getName
    case None => ""
  }
  val former_Blob_File_name: String = former_Blob_File match {
    case Some(file) => file.getName
    case None => ""
  }
  val former_blob_File_content: List[String] = former_Blob_File match {
    case Some(file) => Blob_Manager.get_blob_file_content(file)
    case None =>  List[String]()
  }
  val new_blob_file_content: List[String] = new_blob_file match {

    case Some(file) => Blob_Manager.get_blob_file_content(file)
    case None => List[String]()
  }
}



case class Set_Relationship( unmodified : List[Relationship] = List[Relationship](),
                             modified : List[Relationship] = List[Relationship](),
                             renamed : List[Relationship] = List[Relationship](),
                             created : List[Relationship] = List[Relationship](),
                             deleted : List[Relationship]= List[Relationship]())

class Diff_Manager(repo : Repository) {

  def check_files_status(blobs_lines : List[String],
                         index_lines : List[String],
                         unmodified : List[Relationship] = List[Relationship](),
                         modified : List[Relationship] = List[Relationship](),
                         renamed : List[Relationship] = List[Relationship](),
                         created : List[Relationship] = List[Relationship](),
                         deleted : List[Relationship]= List[Relationship](),
                         check_index_changes_function : (List[String], String) => Relationship = check_index_changes,
                         get_blob_file_from_index_line_function : (String,(String,String)=> File) => File = repo.get_blob_manager().get_blob_file_from_index_line): Set_Relationship = {
    //This function check which index file

    if (index_lines.isEmpty || blobs_lines.isEmpty ){
      if (blobs_lines.isEmpty && index_lines.isEmpty){
        return Set_Relationship(unmodified,modified,renamed,created,deleted)
      }
      if(blobs_lines.isEmpty) {
        val index_line_file = get_blob_file_from_index_line_function(index_lines.head,repo.get_object_file_from_sha1)
        if(index_lines.head.split(" ").last != "deleted"){
          //If the file has already been detected as deleted we consider the delete as "added"
          val rel : Relationship = Relationship(None,Some(index_line_file),"deleted",index_lines.head)
          check_files_status(blobs_lines, index_lines.tail, unmodified, modified, renamed, created, deleted.appended(rel))
        }else{
          check_files_status(blobs_lines, index_lines.tail, unmodified, modified, renamed, created, deleted)
        }
        //List of the deleted files

      }else{
        val blob_file = get_blob_file_from_index_line_function(blobs_lines.head,repo.get_object_file_from_sha1)
        val rel : Relationship = Relationship(Some(blob_file),None,"created",blobs_lines.head)
        //The Created files
        check_files_status(blobs_lines.tail,index_lines,unmodified,modified,renamed,created.appended(rel),deleted)
      }
    }else {
      val rel : Relationship = check_index_changes_function(blobs_lines, index_lines.head)
      rel.change_type match {
        case "unmodified" =>
          //add_blob_to_index(blob, new_index)
          val new_blobs = blobs_lines.filter( _ != rel.index_line)
          check_files_status(new_blobs,index_lines.tail,unmodified.appended(rel),modified,renamed,created,deleted)
  }
}



case class Set_Relationship( unmodified : List[Relationship] = List[Relationship](),
                             modified : List[Relationship] = List[Relationship](),
                             renamed : List[Relationship] = List[Relationship](),
                             created : List[Relationship] = List[Relationship](),
                             deleted : List[Relationship]= List[Relationship]())

class Diff_Manager(repo : Repository) {

  def check_files_status(blobs_lines : List[String],
                         index_lines : List[String],
                         unmodified : List[Relationship] = List[Relationship](),
                         modified : List[Relationship] = List[Relationship](),
                         renamed : List[Relationship] = List[Relationship](),
                         created : List[Relationship] = List[Relationship](),
                         deleted : List[Relationship]= List[Relationship](),
                         check_index_changes_function : (List[String], String) => Relationship = check_index_changes,
                         get_blob_file_from_index_line_function : (String,(String,String)=> File) => File = repo.get_blob_manager().get_blob_file_from_index_line): Set_Relationship = {
    //This function check which index file

    if (index_lines.isEmpty || blobs_lines.isEmpty ){
      if (blobs_lines.isEmpty && index_lines.isEmpty){
        return Set_Relationship(unmodified,modified,renamed,created,deleted)
      }
      if(blobs_lines.isEmpty) {
        val index_line_file = get_blob_file_from_index_line_function(index_lines.head,repo.get_object_file_from_sha1)
        if(index_lines.head.split(" ").last != "deleted"){
          //If the file has already been detected as deleted we consider the delete as "added"
          val rel : Relationship = Relationship(None,Some(index_line_file),"deleted",index_lines.head)
          check_files_status(blobs_lines, index_lines.tail, unmodified, modified, renamed, created, deleted.appended(rel))
        }else{
          check_files_status(blobs_lines, index_lines.tail, unmodified, modified, renamed, created, deleted)
        }
        //List of the deleted files

      }else{
        val blob_file = get_blob_file_from_index_line_function(blobs_lines.head,repo.get_object_file_from_sha1)
        val rel : Relationship = Relationship(Some(blob_file),None,"created",blobs_lines.head)
        //The Created files
        check_files_status(blobs_lines.tail,index_lines,unmodified,modified,renamed,created.appended(rel),deleted)
      }fds
    }else {
      val rel : Relationship = check_index_changes_function(blobs_lines, index_lines.head)
      rel.change_type match {
        case "unmodified" =>
          //add_blob_to_index(blob, new_index)
          val new_blobs = blobs_lines.filter( _ != rel.index_line)
          check_files_status(new_blobs,index_lines.tail,unmodified.appended(rel),modified,renamed,created,deleted)